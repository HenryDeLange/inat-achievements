{"version":3,"file":"b9db12f6b63c2e6a681a.worker.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","scripts/AchievementWrapper.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","scripts/achievements/AirLovers.ts","scripts/achievements/AllCorners.ts","scripts/achievements/utils/index.ts","scripts/achievements/AlwaysOn.ts","../node_modules/date-fns/esm/constants/index.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/_lib/toInteger/index.js","../node_modules/date-fns/esm/parseISO/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/isDate/index.js","../node_modules/date-fns/esm/isValid/index.js","../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../node_modules/date-fns/esm/formatISO9075/index.js","../node_modules/date-fns/esm/addDays/index.js","scripts/achievements/CatchOfTheDay.ts","scripts/achievements/CatsAndDogs.ts","scripts/achievements/CraneyStorker.ts","scripts/achievements/DailyLife.ts","scripts/achievements/DaisyTown.ts","scripts/achievements/EarlyBird.ts","scripts/achievements/EmployeeOfTheMonth.ts","scripts/achievements/FlowerChild.ts","scripts/achievements/ForeverSpring.ts","scripts/achievements/HeartOfTheMatter.ts","scripts/achievements/HomelyHermit.ts","scripts/achievements/KingFisher.ts","scripts/achievements/LichenMoss.ts","scripts/achievements/LifeLister.ts","scripts/achievements/Microcosm.ts","scripts/achievements/NameGiver.ts","scripts/achievements/NightOwl.ts","scripts/achievements/NotABug.ts","scripts/achievements/NotSeeingIsBelieving.ts","../node_modules/date-fns/esm/differenceInCalendarYears/index.js","../node_modules/date-fns/esm/compareAsc/index.js","../node_modules/date-fns/esm/differenceInYears/index.js","scripts/achievements/OldGeeser.ts","scripts/achievements/PlentyOfPlaces.ts","scripts/achievements/RatKing.ts","scripts/achievements/Scatter.ts","scripts/achievements/SelfPollinator.ts","scripts/achievements/SocialButterfly.ts","scripts/achievements/Strider.ts","scripts/achievements/SuperStar.ts","scripts/achievements/TentacleSuckers.ts","scripts/achievements/ToadsAndToadstools.ts","scripts/achievements/TooManyBugs.ts","scripts/achievements/TryMammals.ts","scripts/achievements/WorldClass.ts","scripts/workers/worker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import { AchievementDataType, TaxonRankCacheType } from '../types/AchievementsTypes';\nimport { Observation } from '../types/iNaturalistTypes';\n\nexport default class AchievementWrapper {\n    data: AchievementDataType;\n    getTaxa: () => number[];\n    private evalFunc: (iNatObsJSON: Observation, taxonRanks?: TaxonRankCacheType[]) => number;\n    private resetFunc?: () => void;\n    \n    constructor(key: string, goal: number, getTaxa: () => number[], evalFunc: (iNatObsJSON: Observation, taxonRanks?: TaxonRankCacheType[]) => number, resetFunc?: () => void) {\n        this.data = {\n            icon: key,\n            title: `achievement${key}Title`,\n            details: `achievement${key}Details`,\n            goal: goal,\n            count: 0,\n            observations: []\n        }\n        this.getTaxa = getTaxa;\n        this.evalFunc = evalFunc;\n        this.resetFunc = resetFunc;\n    }\n\n    public getData(): AchievementDataType {\n        return this.data;\n    }\n\n    public evaluate(iNatObsJSON: Observation, taxonRanks?: TaxonRankCacheType[]) {\n        // Evaluate the Observation\n        let result = this.evalFunc(iNatObsJSON, taxonRanks);\n        if (result > 0) {\n            this.updateCount(iNatObsJSON.id ?? 0, result);\n        }\n    }\n\n    private updateCount(observationID: number, increment: number) {\n        this.data.count = this.data.count + increment;\n        // Keep track of observations that increased the achievement\n        this.data.observations.push(observationID);\n    }\n\n    public reset() {\n        this.data.count = 0;\n        this.data.observations = [];\n        if (this.resetFunc) {\n            this.resetFunc();\n        }\n    }\n\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 30;\nconst TAXA = [6544, 11853, 559244, 5362, 5425, 5391, 5400];\n\nexport default new AchievementWrapper(\n    'AirLovers',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 4;\n\nlet northWest = false;\nlet northEast = false;\nlet southWest = false;\nlet southEast = false;\n\nexport default new AchievementWrapper(\n    'AllCorners',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.geojson && iNatObsJSON.geojson.coordinates) {\n            const lon = parseFloat(iNatObsJSON.geojson.coordinates[0]);\n            const lat = parseFloat(iNatObsJSON.geojson.coordinates[1]);\n            if (!northWest && lat > 0 && lon < 0) {\n                northWest = true;\n                return 1;\n            }\n            if (!northEast && lat > 0 && lon > 0) {\n                northEast = true;\n                return 1;\n            }\n            if (!southWest && lat < 0 && lon < 0) {\n                southWest = true;\n                return 1;\n            }\n            if (!southEast && lat < 0 && lon > 0) {\n                southEast = true;\n                return 1;\n            }\n        }\n        return 0;\n    },\n    () => {\n        northWest = false;\n        northEast = false;\n        southWest = false;\n        southEast = false;\n    }\n);\n","export const SPECIES_RANK = 10;\nexport const SUB_SPECIES_RANK = 5;\nexport const CLASS_RANK = 50;\nexport const ORDER_RANK = 40;\nexport const MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;\n\nexport function distance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    }\n    else {\n        const radLat1 = Math.PI * lat1 / 180;\n        const radLat2 = Math.PI * lat2 / 180;\n        const theta = lon1 - lon2;\n        const radTheta = Math.PI * theta / 180;\n        let dist = Math.sin(radLat1) * Math.sin(radLat2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.cos(radTheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180 / Math.PI;\n        dist = dist * 60 * 1.1515; // miles\n        dist = dist * 1.609344; // kilometer\n        return dist;\n    }\n}\n\nexport function splitArrayIntoChunks(inputArray: any[], chunkSize: number): any[][] {\n    const result = inputArray.reduce((resultArray, item, index) => {\n        const chunkIndex = Math.floor(index / chunkSize);\n        if (!resultArray[chunkIndex]) {\n            resultArray[chunkIndex] = [];\n        }\n        resultArray[chunkIndex].push(item);\n        return resultArray;\n    }, []);\n    return result;\n}\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { MILLISECONDS_PER_DAY } from \"./utils\";\n\nconst GOAL = 120;\nconst DAYS = 5;\n\nlet alwaysOnDate = new Date(Date.UTC(1980, 1, 1)).toISOString().split('T')[0];\nlet alwaysOnCount = 0;\nlet alwaysOnCountMax = 0;\n\nexport default new AchievementWrapper(\n    'AlwaysOn',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        const obsDate = iNatObsJSON?.observed_on_details?.date ?? alwaysOnDate;\n        const prevDate = new Date(Number(alwaysOnDate.substring(0, 4)), Number(alwaysOnDate.substring(5, 7)), Number(alwaysOnDate.substring(8, 10)));\n        const curDate = new Date(Number(obsDate.substring(0, 4)), Number(obsDate.substring(5, 7)), Number(obsDate.substring(8, 10)));\n        if (Math.ceil(Math.abs(prevDate.getTime() - curDate.getTime()) / MILLISECONDS_PER_DAY) >= DAYS) {\n            alwaysOnCount = 0;\n        }\n        if (alwaysOnDate !== obsDate) {\n            alwaysOnCount++;\n            alwaysOnDate = obsDate;\n        }\n        if (alwaysOnCountMax < alwaysOnCount) {\n            alwaysOnCountMax = alwaysOnCount;\n            return 1;\n        }\n        return 0;\n    },\n    () => {\n        alwaysOnDate = new Date(Date.UTC(1980, 1, 1)).toISOString().split('T')[0];\n        alwaysOnCount = 0;\n        alwaysOnCountMax = 0;\n    }\n);\n","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, options) {\n  var _options$additionalDi;\n\n  requiredArgs(1, arguments);\n  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nexport default function formatISO9075(dirtyDate, options) {\n  var _options$format, _options$representati;\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","/* eslint-disable import/no-anonymous-default-export */\nimport { addDays, formatISO9075, parseISO } from \"date-fns\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 5;\nconst TAXA = [47178, 85497, 47273];\n\nlet maximum = 0;\nlet fishDays: string[] = [];\n\nexport default new AchievementWrapper(\n    'CatchOfTheDay',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON?.observed_on_details?.date) {\n            for (const taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                if (TAXA.includes(taxonID)) {\n                    const obsDate = iNatObsJSON.observed_on_details.date;\n                    if (!fishDays.includes(obsDate)) {\n                        fishDays.push(obsDate);\n                        if (fishDays.length === 1) {\n                            maximum = 1;\n                            return 1;\n                        }\n                        else {\n                            const date = parseISO(obsDate);\n                            let countConsecutiveDays = 1;\n                            while (fishDays.includes(formatISO9075(addDays(date, countConsecutiveDays), { representation: 'date' }))) {\n                                countConsecutiveDays++;\n                            }\n                            if (countConsecutiveDays > maximum) {\n                                maximum = countConsecutiveDays;\n                                return 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        maximum = 0;\n        fishDays = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 9;\nconst TAXA_FELINE = 41944;\nconst TAXA_CANINE = 42043;\n\nlet catDays: string[] = [];\nlet dogDays: string[] = [];\n\nexport default new AchievementWrapper(\n    'CatsAndDogs',\n    GOAL,\n    () => [TAXA_FELINE, TAXA_CANINE],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.observed_on_details?.date) {\n            for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                if (TAXA_FELINE === taxonID) {\n                    const date = getDate(iNatObsJSON);\n                    if (!catDays.includes(date)) {\n                        catDays.push(date);\n                        if (dogDays.includes(date)) {\n                            return 1;\n                        }\n                    }\n                }\n                else if (TAXA_CANINE === taxonID) {\n                    const date = getDate(iNatObsJSON);\n                    if (!dogDays.includes(date)) {\n                        dogDays.push(date);\n                        if (catDays.includes(date)) {\n                            return 1;\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        catDays = [];\n        dogDays = [];\n    }\n);\n\nfunction getDate(iNatObsJSON: Observation): string {\n    return iNatObsJSON.observed_on_details?.date ? iNatObsJSON.observed_on_details?.date : 'unknown';\n}\n\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 24;\nconst TAXA = [3726, 23, 4929];\n\nexport default new AchievementWrapper(\n    'CraneyStorker',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { SPECIES_RANK, SUB_SPECIES_RANK } from \"./utils\";\n\nconst GOAL = 24;\n\nlet dailySpeciesCount: number[] = [];\nlet dailyLifeDate: string | null = null;\nlet dailyLifeDatePrev: string | null = null;\n\nexport default new AchievementWrapper(\n    'DailyLife',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        const obsDate = iNatObsJSON?.observed_on_details?.date ?? dailyLifeDate;\n        if (dailyLifeDate !== obsDate) {\n            dailyLifeDate = obsDate;\n            dailySpeciesCount = [];\n        }\n        let id = undefined;\n        if (iNatObsJSON?.taxon?.rank_level === SPECIES_RANK) {\n            id = iNatObsJSON.taxon.id ?? 0;\n        }\n        else if (iNatObsJSON?.taxon?.rank_level === SUB_SPECIES_RANK) {\n            id = iNatObsJSON?.taxon?.parent_id ?? 0;\n        }\n        if (id) {\n            if (!dailySpeciesCount.includes(id)) {\n                dailySpeciesCount.push(id);\n            }\n            if (dailySpeciesCount.length >= GOAL && dailyLifeDatePrev !== dailyLifeDate) {\n                dailyLifeDatePrev = dailyLifeDate;\n                return 1;\n            }\n        }\n        return 0;\n    },\n    () => {\n        dailySpeciesCount = [];\n        dailyLifeDate = null;\n        dailyLifeDatePrev = null;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 77;\nconst TAXA = 47604;\n\nexport default new AchievementWrapper(\n    'DaisyTown',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA === taxonID) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 7;\nconst TAXA_BIRD = 3;\nconst TAXA_WORM = 47491;\n\nlet days: (string | null)[] = [];\nlet birdDate: string | null = null;\nlet wormDate: string | null = null;\n\nexport default new AchievementWrapper(\n    'EarlyBird',\n    GOAL,\n    () => [TAXA_BIRD, TAXA_WORM],\n    (iNatObsJSON: Observation) => {\n        if ((iNatObsJSON?.observed_on_details?.hour ?? 99) <= GOAL) { // before 7AM\n            for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                if (taxonID === TAXA_BIRD) {\n                    birdDate = iNatObsJSON?.observed_on_details?.date ?? null;\n                }\n                else if (taxonID === TAXA_WORM) {\n                    wormDate = iNatObsJSON?.observed_on_details?.date ?? null;\n                }\n                if (birdDate && wormDate && birdDate === wormDate && !days.includes(birdDate)) { // only count the day once\n                    days.push(birdDate);\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        days = [];\n        birdDate = null;\n        wormDate = null;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 31;\nconst TAXA = [118903, 47336, 538904];\n\nlet monthID = '-1|-1';\nlet monthCount = 0;\nlet maxMonthCount = 0;\n\nexport default new AchievementWrapper(\n    'EmployeeOfTheMonth',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        const obsMonthID = `${iNatObsJSON.observed_on_details?.year ?? -1}|${iNatObsJSON.observed_on_details?.month ?? -1}`;\n        if (monthID !== obsMonthID) {\n            monthID = obsMonthID;\n            monthCount = 0;\n        }\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                monthCount++;\n                if (monthCount > maxMonthCount) {\n                    maxMonthCount = monthCount;\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        monthID = '-1|-1';\n        monthCount = 0;\n        maxMonthCount = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { TaxonRankCacheType } from \"../../types/AchievementsTypes\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { ORDER_RANK } from \"./utils\";\n\nconst GOAL = 25;\nexport const FLOWER_CHILD_TAXA = 47125;\n\nlet flowerOrderCount: number[] = [];\n\n// TODO: Add condition to have 'flowering' annotation\nexport default new AchievementWrapper(\n    'FlowerChild',\n    GOAL,\n    () => [FLOWER_CHILD_TAXA],\n    (iNatObsJSON: Observation, taxonRanks?: TaxonRankCacheType[]) => {\n        if ((iNatObsJSON?.taxon?.rank_level ?? 999) <= ORDER_RANK) {\n            if (iNatObsJSON?.taxon?.ancestor_ids && iNatObsJSON.taxon.ancestor_ids.length > 3) {\n                let found = false;\n                for (let taxonID of iNatObsJSON.taxon.ancestor_ids) {\n                    if (taxonID === FLOWER_CHILD_TAXA) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found) {\n                    const relevantAncestors = iNatObsJSON.taxon.ancestor_ids.slice(3, Math.min(7, iNatObsJSON.taxon.ancestor_ids.length));\n                    for (let taxonID of relevantAncestors) {\n                        const rank = taxonRanks!.find((taxonRankCache) => taxonRankCache.taxonID === taxonID)?.rank;\n                        if (rank) {\n                            if (rank === ORDER_RANK) {\n                                if (!flowerOrderCount.includes(taxonID)) {\n                                    flowerOrderCount.push(taxonID);\n                                    return 1;\n                                }\n                            }\n                            if (rank <= ORDER_RANK)\n                                break;\n                        }\n                        else {\n                            console.log(`Taxon Rank not found for taxon ${taxonID} on observation ${iNatObsJSON.id}`);\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        flowerOrderCount = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 52;\nconst TAXA = 47125;\nconst ANNOTATION_ATTRIBUTE = 12;\nconst ANNOTATION_VALUE = 13;\n\nlet weeksWithFlowers: number[] = [];\n\nexport default new AchievementWrapper(\n    'ForeverSpring',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        let key = iNatObsJSON.observed_on_details?.week;\n        if (key) {\n            if (key > GOAL) {\n                // Not sure if this is needed, but group the last day(s) of the year into the last week of the year\n                key = GOAL;\n            }\n            for (const annotation of iNatObsJSON.annotations ?? []) {\n                if (annotation.controlled_attribute_id === ANNOTATION_ATTRIBUTE\n                        && annotation.controlled_value_id === ANNOTATION_VALUE) {\n                    for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                        if (TAXA === taxonID) {\n                            if (!weeksWithFlowers.includes(key)) {\n                                weeksWithFlowers.push(key);\n                                return 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        weeksWithFlowers = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 13;\n\nexport default new AchievementWrapper(\n    'HeartOfTheMatter',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON?.taxon?.threatened === true) {\n            return 1;\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { addDays, formatISO9075 } from \"date-fns\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 24\nconst TAXA = [47398, 39532, 47114, 61415];\nconst WEEK = 7;\n\nlet obsPerDay = new Map<string, number>();\nlet maxCount = 0;\n\nexport default new AchievementWrapper(\n    'HomelyHermit',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                if (iNatObsJSON?.observed_on_details?.date) {\n                    const obsDate = iNatObsJSON.observed_on_details.date;\n                    const date = new Date(obsDate);\n                    const obsCount = (obsPerDay.get(obsDate) ?? 0) + 1;\n                    obsPerDay.set(obsDate, obsCount);\n                    let currentMaxCount = obsCount;\n                    for (let i = 1; i <= WEEK - 1; i++) {\n                        const prevDayObsCount = obsPerDay.get(formatISO9075(addDays(date, i), { representation: 'date' }));\n                        if (prevDayObsCount) {\n                            currentMaxCount += prevDayObsCount;\n                        }\n                    }\n                    if (currentMaxCount > maxCount) {\n                        maxCount = currentMaxCount;\n                        return 1;\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        obsPerDay.clear();\n        maxCount = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 33;\nconst TAXA = 47178;\n\n// TODO: Instead count all fish species observed during a set period? Or combine with the King-Fisher bird?\nexport default new AchievementWrapper(\n    'KingFisher',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA === taxonID) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 31;\nconst TAXA = [311249, 54743];\n\nexport default new AchievementWrapper(\n    'LichenMoss',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { SPECIES_RANK, SUB_SPECIES_RANK } from \"./utils\";\n\nconst GOAL = 365;\n\nlet allTimeSpeciesCount: number[] = [];\nlet currentYear = 0;\nlet maxCount = 0;\n\nexport default new AchievementWrapper(\n    'LifeLister',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.observed_on_details?.year\n                && ((iNatObsJSON.taxon?.id && iNatObsJSON?.taxon?.rank_level === SPECIES_RANK)\n                    || (iNatObsJSON.taxon?.parent_id && iNatObsJSON?.taxon?.rank_level === SUB_SPECIES_RANK))) {\n            if (currentYear !== iNatObsJSON.observed_on_details?.year) {\n                allTimeSpeciesCount = [];\n                currentYear = iNatObsJSON.observed_on_details?.year;\n            }\n            if (iNatObsJSON.taxon?.id && iNatObsJSON?.taxon?.rank_level === SPECIES_RANK) {\n                const id = iNatObsJSON.taxon.id;\n                if (!allTimeSpeciesCount.includes(id)) {\n                    allTimeSpeciesCount.push(id);\n                }\n            }\n            else if (iNatObsJSON?.taxon?.parent_id) {\n                const id = iNatObsJSON?.taxon?.parent_id;\n                if (iNatObsJSON?.taxon?.rank_level === SUB_SPECIES_RANK && !allTimeSpeciesCount.includes(id)) {\n                    allTimeSpeciesCount.push(id);\n                }\n                // For these I'm not sure if Species is the parent, but I assume it is so\n                else if (iNatObsJSON?.taxon?.rank_level! < SPECIES_RANK && !allTimeSpeciesCount.includes(id)) {\n                    // console.log('Adding parent_id', id, 'for unknown rank', iNatObsJSON?.taxon?.rank_level)\n                    allTimeSpeciesCount.push(id);\n                }\n            }\n            if (maxCount < allTimeSpeciesCount.length) {\n                maxCount = allTimeSpeciesCount.length;\n                return 1;\n            }\n        }\n        return 0;\n    },\n    () => {\n        allTimeSpeciesCount = [];\n        currentYear = 0;\n        maxCount = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 12;\nconst TAXA = [123880, 67333, 126917, 124337, 151817, 47686, 54960, 131236];\n\nexport default new AchievementWrapper(\n    'Microcosm',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 2000;\n\nlet idCount = 0;\n\nexport default new AchievementWrapper(\n    'NameGiver',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (idCount === 0) {\n            idCount = iNatObsJSON?.user?.identifications_count ?? 0;\n            return idCount;\n        }\n        return 0;\n    },\n    () => {\n        idCount = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 12;\nconst TAXA = [19350, 19664, 19376, 19351];\n\nexport default new AchievementWrapper(\n    'NightOwl',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)\n                    && ((iNatObsJSON?.observed_on_details?.hour ?? 99) <= 6\n                        || (iNatObsJSON?.observed_on_details?.hour ?? -99) >= 18)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 201;\nconst TAXA_INCLUDE = [47158, 144128, 47119, 243773];\nconst TAXA_EXCLUDE = 61267;\n\nexport default new AchievementWrapper(\n    'NotABug',\n    GOAL,\n    () => [...TAXA_INCLUDE, TAXA_EXCLUDE],\n    (iNatObsJSON: Observation) => {\n        let include = false;\n        let exclude = false;\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA_INCLUDE.includes(taxonID))\n                include = true;\n            if (TAXA_EXCLUDE === taxonID)\n                exclude = true;\n        }\n        if (include && !exclude) {\n            return 1;\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 50;\nconst ANNOTATION_ATTRIBUTE = 22;\nconst ANNOTATION_VALUE = 24;\n\nexport default new AchievementWrapper(\n    'NotSeeingIsBelieving',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        for (const annotation of iNatObsJSON.annotations ?? []) {\n            if (annotation.controlled_attribute_id === ANNOTATION_ATTRIBUTE\n                    && annotation.controlled_value_id !== ANNOTATION_VALUE) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","/* eslint-disable import/no-anonymous-default-export */\nimport { differenceInYears } from \"date-fns\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 10;\nconst TAXA = 6912;\n\nlet maxYearsAgo = 0;\n\nexport default new AchievementWrapper(\n    'OldGeeser',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA === taxonID) {\n                const obsYear = iNatObsJSON?.observed_on_details?.year ?? -1;\n                const obsMonth = iNatObsJSON?.observed_on_details?.month ?? -1;\n                const obsDay = iNatObsJSON?.observed_on_details?.day ?? -1;\n                if (obsYear >= 0 && obsMonth >= 0 && obsDay >= 0) {\n                    const obsDate = new Date(obsYear, obsMonth, obsDay);\n                    const currentDate = new Date();\n                    if (obsDate < currentDate) {\n                        const obsYearsAgo = differenceInYears(currentDate, obsDate);\n                        if (obsYearsAgo > maxYearsAgo) {\n                            const delta = obsYearsAgo - maxYearsAgo;\n                            maxYearsAgo = obsYearsAgo;\n                            return delta;\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        maxYearsAgo = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 20;\n\nlet grids: string[] = [];\n\nexport default new AchievementWrapper(\n    'PlentyOfPlaces',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.geojson && iNatObsJSON.geojson.coordinates) {\n            let lon = Math.round((Math.trunc(parseFloat(iNatObsJSON.geojson.coordinates[0]) * 10) / 10) * 2) / 2;\n            let lat = Math.round((Math.trunc(parseFloat(iNatObsJSON.geojson.coordinates[1]) * 10) / 10) * 2) / 2;\n            const grid = `${lat}|${lon}`;\n            if (!grids.includes(grid)) {\n                grids.push(grid);\n                return 1;\n            }\n        }\n        return 0;\n    },\n    () => {\n        grids = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 25;\nconst TAXA = 43698;\n\nexport default new AchievementWrapper(\n    'RatKing',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA === taxonID) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { SPECIES_RANK } from \"./utils\";\n\nconst GOAL = 16;\nconst ANNOTATION_ATTRIBUTE = 22;\nconst ANNOTATION_VALUE = 25;\n\nlet grids: string[] = [];\n\nexport default new AchievementWrapper(\n    'Scatter',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.annotations\n                && (iNatObsJSON?.taxon?.rank_level ?? 999) <= SPECIES_RANK\n                && iNatObsJSON.geojson && iNatObsJSON.geojson.coordinates) {\n            for (const annotation of iNatObsJSON.annotations) {\n                if (annotation.controlled_attribute_id === ANNOTATION_ATTRIBUTE\n                        && annotation.controlled_value_id === ANNOTATION_VALUE) {\n                    const lon = Math.round((Math.trunc(parseFloat(iNatObsJSON.geojson?.coordinates[0]) * 1000) / 1000) * 4) / 4;\n                    const lat = Math.round((Math.trunc(parseFloat(iNatObsJSON.geojson?.coordinates[1]) * 1000) / 1000) * 4) / 4;\n                    const grid = `${lat}|${lon}`;\n                    if (!grids.includes(grid)) {\n                        grids.push(grid);\n                        return 1;\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        grids = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 50;\n\nexport default new AchievementWrapper(\n    'SelfPollinator',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON?.comments && iNatObsJSON?.user?.id) {\n            for (let comment of iNatObsJSON?.comments ?? []) {\n                if (comment?.user?.id && comment.user.id === iNatObsJSON.user.id) {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 30;\nconst TAXA = 47224;\n\n// TODO: Make sure this also counts comments inside identifications?\nexport default new AchievementWrapper(\n    'SocialButterfly',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        if ((iNatObsJSON?.comments_count ?? 0) > 0) {\n            for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                if (TAXA === taxonID) {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { distance } from \"./utils\";\n\nconst GOAL = 500;\n\ndeclare type LatLon = {\n    obsID: number;\n    lat: number;\n    lon: number;\n}\n\nconst obsPerDay = new Map<string, LatLon[]>();\nlet maxDistance = 0;\n\nconst achievement = new AchievementWrapper(\n    'Strider',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON.geojson && iNatObsJSON.geojson.coordinates \n                && iNatObsJSON.geojson.coordinates.length === 2 && iNatObsJSON?.observed_on_details?.date) {\n            const key = iNatObsJSON.observed_on_details.date;\n            let dayObs = obsPerDay.get(key);\n            if (!dayObs) {\n                dayObs = [];\n                obsPerDay.set(key, dayObs);\n            }\n            const newObs = {\n                obsID: iNatObsJSON.id ?? 0,\n                lon: parseFloat(iNatObsJSON.geojson.coordinates[0]),\n                lat: parseFloat(iNatObsJSON.geojson.coordinates[1])\n            };\n            dayObs.push(newObs);\n            if (dayObs.length > 1) {\n                for (const tempObs of dayObs) {\n                    let obsDistance = Math.round(distance(newObs.lat, newObs.lon, tempObs.lat, tempObs.lon));\n                    if (obsDistance > maxDistance) {\n                        const difference = obsDistance - maxDistance;\n                        maxDistance = obsDistance;\n                        // Replace the achievement's Observations array with the new data\n                        // (only add the old observation, the new one gets added automatically by AchievementWrapper)\n                        achievement.getData().observations = [ tempObs.obsID ];\n                        return difference;\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        obsPerDay.clear();\n        maxDistance = 0;\n    }\n);\n\nexport default achievement;\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { SPECIES_RANK, SUB_SPECIES_RANK } from \"./utils\";\n\nconst GOAL = 5;\nconst TAXA = 481959;\n\nlet species: number[] = [];\n\nexport default new AchievementWrapper(\n    'SuperStar',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON?.taxon?.rank_level && iNatObsJSON.taxon.rank_level <= SPECIES_RANK) {\n            const rank = iNatObsJSON.taxon.rank_level;\n            if (iNatObsJSON?.taxon?.id && rank === SPECIES_RANK) {\n                for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                    if (TAXA === taxonID) {\n                        const id = iNatObsJSON.taxon.id;\n                        if (!species.includes(id)) {\n                            species.push(id);\n                            return 1;\n                        }\n                    }\n                }\n            }\n            else if (iNatObsJSON?.taxon?.parent_id\n                    && (rank === SUB_SPECIES_RANK || rank < SPECIES_RANK)) { // Assume non-subspecies (variety, etc.) work the same as subspecies\n                for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                    if (TAXA === taxonID) {\n                        const parentTaxonID = iNatObsJSON.taxon.parent_id;\n                        if (!species.includes(parentTaxonID)) {\n                            species.push(parentTaxonID);\n                            return 1;\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        species = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { SPECIES_RANK, SUB_SPECIES_RANK } from \"./utils\";\n\nconst GOAL = 8;\nconst TAXA = [47459, 47797, 48332];\n\nlet species: number[] = [];\n\nexport default new AchievementWrapper(\n    'TentacleSuckers',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        if (iNatObsJSON?.taxon?.rank_level) {\n            if (iNatObsJSON.taxon.rank_level <= SPECIES_RANK) {\n                for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n                    if (TAXA.includes(taxonID)) {\n                        let speciesID;\n                        if (iNatObsJSON?.taxon?.id && iNatObsJSON.taxon.rank_level === SPECIES_RANK) {\n                            speciesID = iNatObsJSON.taxon.id;\n                        }\n                        else if (iNatObsJSON?.taxon?.parent_id \n                                && (iNatObsJSON.taxon.rank_level === SUB_SPECIES_RANK\n                                    || iNatObsJSON.taxon.rank_level < SPECIES_RANK)) {\n                            speciesID = iNatObsJSON.taxon.parent_id;\n                        }\n                        if (speciesID && !species.includes(speciesID)) {\n                            species.push(speciesID);\n                            return 1;\n                        }\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        species = [];\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 42;\nconst TAXA = [20979, 47169];\n\n// TODO: Add some condition to link the two groups better\nexport default new AchievementWrapper(\n    'ToadsAndToadstools',\n    GOAL,\n    () => TAXA,\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA.includes(taxonID)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n)\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 99;\nconst TAXA = 61267;\n\nexport default new AchievementWrapper(\n    'TooManyBugs',\n    GOAL,\n    () => [TAXA],\n    (iNatObsJSON: Observation) => {\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA === taxonID) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\n\nconst GOAL = 9;\nconst TAXA_DIG = [42478, 43253, 46927, 71384];\nconst TAXA_SWIM = [152871, 46306, 526556];\nconst TAXA_FLY = 40268;\n\nlet mammalDig = 0;\nlet mammalSwim = 0;\nlet mammalFly = 0;\n\nexport default new AchievementWrapper(\n    'TryMammals',\n    GOAL,\n    () => [...TAXA_DIG, TAXA_FLY, ...TAXA_SWIM],\n    (iNatObsJSON: Observation) => {\n        const prevCount = Math.min(mammalDig,mammalSwim, mammalFly);\n        for (let taxonID of iNatObsJSON?.taxon?.ancestor_ids ?? []) {\n            if (TAXA_DIG.includes(taxonID)) {\n                mammalDig++;\n                break;\n            }\n            if (TAXA_SWIM.includes(taxonID)) {\n                mammalSwim++;\n                break;\n            }\n            if (TAXA_FLY === taxonID) {\n                mammalFly++;\n                break;\n            }\n        }\n        const newCount = Math.min(mammalDig,mammalSwim, mammalFly);\n        if (prevCount < newCount) {\n            return 1;\n        }\n        return 0;\n    },\n    () => {\n        mammalDig = 0;\n        mammalSwim = 0;\n        mammalFly = 0;\n    }\n);\n","/* eslint-disable import/no-anonymous-default-export */\nimport { TaxonRankCacheType } from \"../../types/AchievementsTypes\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport { CLASS_RANK } from \"./utils\";\n\nconst GOAL = 21;\n\nlet classCount: number[] = [];\n\nexport default new AchievementWrapper(\n    'WorldClass',\n    GOAL,\n    () => [],\n    (iNatObsJSON: Observation, taxonRanks?: TaxonRankCacheType[]) => {\n        if ((iNatObsJSON?.taxon?.rank_level ?? 999) <= CLASS_RANK) {\n            if (iNatObsJSON?.taxon?.ancestor_ids && iNatObsJSON.taxon.ancestor_ids.length > 2) {\n                const relevantAncestors = iNatObsJSON.taxon.ancestor_ids.slice(2, Math.min(6, iNatObsJSON.taxon.ancestor_ids.length));\n                for (let taxonID of relevantAncestors) {\n                    const rank = taxonRanks!.find((taxonRankCache) => taxonRankCache.taxonID === taxonID)?.rank;\n                    if (rank) {\n                        if (rank === CLASS_RANK) {\n                            if (!classCount.includes(taxonID)) {\n                                classCount.push(taxonID);\n                                return 1;\n                            }\n                        }\n                        if (rank <= CLASS_RANK)\n                            break;\n                    }\n                    else {\n                        console.log(`Taxon Rank not found for taxon ${taxonID} on observation ${iNatObsJSON.id}`);\n                    }\n                }\n            }\n        }\n        return 0;\n    },\n    () => {\n        classCount = [];\n    }\n);\n","import { AchievementDataType, TaxonRankCacheType } from \"../../types/AchievementsTypes\";\nimport { Observation } from \"../../types/iNaturalistTypes\";\nimport AchievementWrapper from \"../AchievementWrapper\";\nimport AirLovers from './../achievements/AirLovers';\nimport AllCorners from './../achievements/AllCorners';\nimport AlwaysOn from './../achievements/AlwaysOn';\nimport CatchOfTheDay from './../achievements/CatchOfTheDay';\nimport CatsAndDogs from './../achievements/CatsAndDogs';\nimport CraneyStorker from './../achievements/CraneyStorker';\nimport DailyLife from './../achievements/DailyLife';\nimport DaisyTown from './../achievements/DaisyTown';\nimport EarlyBird from './../achievements/EarlyBird';\nimport EmployeeOfTheMonth from './../achievements/EmployeeOfTheMonth';\nimport FlowerChild from './../achievements/FlowerChild';\nimport ForeverSpring from './../achievements/ForeverSpring';\nimport HeartOfTheMatter from './../achievements/HeartOfTheMatter';\nimport HomelyHermit from './../achievements/HomelyHermit';\nimport KingFisher from './../achievements/KingFisher';\nimport LichenMoss from './../achievements/LichenMoss';\nimport LifeLister from './../achievements/LifeLister';\nimport Microcosm from './../achievements/Microcosm';\nimport NameGiver from './../achievements/NameGiver';\nimport NightOwl from './../achievements/NightOwl';\nimport NotABug from './../achievements/NotABug';\nimport NotSeeingIsBelieving from './../achievements/NotSeeingIsBelieving';\nimport OldGeeser from './../achievements/OldGeeser';\nimport PlentyOfPlaces from './../achievements/PlentyOfPlaces';\nimport RatKing from './../achievements/RatKing';\nimport Scatter from './../achievements/Scatter';\nimport SelfPollinator from './../achievements/SelfPollinator';\nimport SocialButterfly from './../achievements/SocialButterfly';\nimport Strider from './../achievements/Strider';\nimport SuperStar from './../achievements/SuperStar';\nimport TentacleSuckers from './../achievements/TentacleSuckers';\nimport ToadsAndToadstools from './../achievements/ToadsAndToadstools';\nimport TooManyBugs from './../achievements/TooManyBugs';\nimport TryMammals from './../achievements/TryMammals';\nimport WorldClass from './../achievements/WorldClass';\n\nlet achievementWrappers: AchievementWrapper[] = [\n    LifeLister,\n    SelfPollinator,\n    TryMammals,\n    NightOwl,\n    KingFisher,\n    DaisyTown,\n    HeartOfTheMatter,\n    SocialButterfly,\n    AirLovers,\n    NameGiver,\n    RatKing,\n    CraneyStorker,\n    TooManyBugs,\n    NotABug,\n    LichenMoss,\n    ToadsAndToadstools,\n    FlowerChild,\n    WorldClass,\n    DailyLife,\n    AlwaysOn,\n    CatchOfTheDay,\n    EarlyBird,\n    TentacleSuckers,\n    HomelyHermit,\n    Microcosm,\n    EmployeeOfTheMonth,\n    Strider,\n    ForeverSpring,\n    NotSeeingIsBelieving,\n    PlentyOfPlaces,\n    AllCorners,\n    CatsAndDogs,\n    SuperStar,\n    OldGeeser,\n    Scatter\n];\n\nexport function getAchievementWrappers() {\n    return achievementWrappers;\n}\n\nexport function reset() {\n    for (let achievementWrapper of achievementWrappers) {\n        achievementWrapper.reset();\n    }\n    return achievementWrappers.map(achievementWrapper => achievementWrapper.data);\n}\n\nexport function evaluate(observations: Observation[], taxonRanks: TaxonRankCacheType[]): Promise<AchievementDataType[]> {\n    for (let achievementWrapper of achievementWrappers) {\n        for (let observation of observations) {\n            achievementWrapper.evaluate(observation, taxonRanks);\n        }\n    }\n    return Promise.resolve(achievementWrappers.map(achievementWrapper => achievementWrapper.data));\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","_arrayLikeToArray","arr","len","length","i","arr2","Array","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","slice","constructor","name","from","test","F","s","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_typeof","_toPropertyKey","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_defineProperties","target","props","descriptor","configurable","writable","AchievementWrapper","goal","getTaxa","evalFunc","resetFunc","instance","Constructor","data","this","icon","title","details","count","observations","protoProps","staticProps","iNatObsJSON","taxonRanks","result","updateCount","id","observationID","increment","push","TAXA","taxon","ancestor_ids","taxonID","includes","northWest","northEast","southWest","southEast","geojson","coordinates","lon","parseFloat","lat","SPECIES_RANK","distance","lat1","lon1","lat2","lon2","radLat1","Math","PI","radLat2","theta","radTheta","dist","sin","cos","acos","alwaysOnDate","Date","UTC","toISOString","split","alwaysOnCount","alwaysOnCountMax","obsDate","observed_on_details","date","prevDate","substring","curDate","ceil","abs","getTime","millisecondsInHour","pow","requiredArgs","required","args","toInteger","dirtyNumber","NaN","number","isNaN","floor","parseISO","argument","options","_options$additionalDi","arguments","additionalDigits","RangeError","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","offset","timestamp","time","parseTime","timezone","dirtyDate","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","timeString","array","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","hours","parseTimeUnit","minutes","seconds","validateTime","timezoneString","sign","_hours","validateTimezone","toDate","argStr","console","warn","Error","stack","isDate","isValid","addLeadingZeros","targetLength","output","formatISO9075","_options$format","_options$representati","concat","originalDate","format","representation","dateDelimiter","timeDelimiter","getDate","getMonth","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator","addDays","dirtyAmount","amount","setDate","maximum","fishDays","countConsecutiveDays","catDays","dogDays","dailySpeciesCount","dailyLifeDate","dailyLifeDatePrev","rank_level","parent_id","days","birdDate","wormDate","monthID","monthCount","maxMonthCount","obsMonthID","flowerOrderCount","found","min","rank","find","taxonRankCache","log","weeksWithFlowers","annotations","annotation","controlled_attribute_id","controlled_value_id","threatened","obsPerDay","Map","maxCount","obsCount","set","currentMaxCount","WEEK","prevDayObsCount","clear","allTimeSpeciesCount","currentYear","idCount","user","identifications_count","TAXA_INCLUDE","include","exclude","differenceInCalendarYears","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","compareAsc","differenceInYears","difference","isLastYearNotFull","maxYearsAgo","obsYear","obsMonth","obsDay","currentDate","obsYearsAgo","delta","grids","round","trunc","grid","comments","comment","comments_count","maxDistance","achievement","dayObs","newObs","obsID","tempObs","obsDistance","getData","species","parentTaxonID","speciesID","TAXA_DIG","TAXA_SWIM","mammalDig","mammalSwim","mammalFly","prevCount","classCount","achievementWrappers","LifeLister","SelfPollinator","TryMammals","NightOwl","KingFisher","DaisyTown","HeartOfTheMatter","SocialButterfly","AirLovers","NameGiver","RatKing","CraneyStorker","TooManyBugs","NotABug","LichenMoss","ToadsAndToadstools","FlowerChild","DailyLife","AlwaysOn","CatchOfTheDay","EarlyBird","TentacleSuckers","HomelyHermit","Microcosm","EmployeeOfTheMonth","Strider","ForeverSpring","NotSeeingIsBelieving","PlentyOfPlaces","AllCorners","CatsAndDogs","SuperStar","OldGeeser","Scatter","getAchievementWrappers","reset","map","achievementWrapper","evaluate","observation","Promise","resolve"],"sourceRoot":""}